C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE LCDDRIVE
OBJECT MODULE PLACED IN LcdDrive.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LcdDrive.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #define uint unsigned int
   2          #define uchar unsigned char
   3          
   4          
   5          #include "reg51.h"
   6          #include "intrins.h"
   7          #include "lcd.c"
   8          #include "display.h"
   9          
  10          #define DisplayOff       0x3E
  11          #define DisplayOn        0x3F
  12          #define SetDiSartL       0xC0
  13          #define SetPageAddr      0xB8
  14          #define SetColumnAddr    0x40
  15          
  16          #define LcdDPort P2 
  17          #define Ldata    1
  18          #define Lcomm    0
  19          #define BackOn   0
  20          #define BackOFF  1
  21          #define ConlumnEndAddr   128
  22          #define LcdRowNum        64
  23          #define LcdPageNub       8-1
  24          
  25          #define Chs              1
  26          #define Chr              0
  27          #define L_Lcd            1
  28          #define R_Lcd            0
  29          #define nLcd1            0
  30          #define nLcd2            1
  31          #define Lcd_En           1
  32          #define Lcd_nEn          0
  33          
  34          #define RecDis           0
  35          #define ClrAnd           1
  36          #define ClrAdd           2
  37          
  38          
  39          #define  nLcdBAK_MuxA    2
  40          #define  nLcdA0_MuxA     1
  41          #define  nLcd_RW         0
  42          
  43          
  44          #define  COMM                0
  45          #define  nLcd_RW_W           0
  46          
  47          #define f_line  0x40   //row addr
  48          
  49          sbit    LCD_BRESET      = P2^4;                 // from LCD busy flag
  50          
  51          sbit    LCD_BF      = P2^7;     
  52          sbit    LCD_REST    = P2^4; 
  53          
  54          sbit    LCD_EN          = P0^0;                 // enable the LCD
  55          sbit    LCD_RW          = P0^1;                 // LCD read or write
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 2   

  56          sbit    LCD_DI          = P0^2;                 // LCD instruction or data
  57          
  58          sbit    LCD_CSA         = P1^6;                 // select the section A to Display
  59          sbit    LCD_CSB         = P1^7;                 // select the section B to Display
  60          
  61          
  62          
  63          unsigned char   LCD_busy1(void)
  64          {
  65   1              unsigned char i,j;
  66   1              LCD_DI  = 0;                  
  67   1              LCD_RW  = 1;
  68   1              for(j=250;j>=1;j--)
  69   1              {
  70   2                      LcdDPort=LcdDPort | 0x90;
  71   2                      _nop_();
  72   2              _nop_();
  73   2                      LCD_EN  = 1;
  74   2                      i=10;
  75   2                      while(i--);                 
  76   2              LCD_EN  = 0;
  77   2              _nop_();
  78   2              _nop_();
  79   2                      if(!(LCD_BF || LCD_REST))
  80   2                              { break;}       
  81   2                 break;
  82   2              }
  83   1              return(j);
  84   1      }
  85          
  86          
  87          
  88          
  89            /*------------------------------------------*/
  90          void wrLcdOper(uchar idata choe1,uchar idata choe2,uchar idata data_comm,uchar idata content)
  91          {  
  92   1          uchar i;
  93   1          LCD_busy1();
  94   1          if(data_comm!=0)
  95   1           {  LCD_DI  = 1;                  
  96   2                  LCD_RW      = 0; 
  97   2            }
  98   1          else
  99   1           { 
 100   2            LCD_DI    = 0;                  
 101   2                LCD_RW        = 0;
 102   2           } 
 103   1        LCD_EN        = 1;
 104   1        LcdDPort=content;    //output data or comm  
 105   1        if(choe1==1)
 106   1         { LCD_CSA=Lcd_En; }
 107   1        if(choe2==1)
 108   1         { LCD_CSB=Lcd_En; }
 109   1        i=20; 
 110   1        while( i--);
 111   1        LCD_EN        = 0;
 112   1        _nop_();
 113   1        _nop_();
 114   1        if(choe1==1)
 115   1         { LCD_CSA=Lcd_nEn; }
 116   1        if(choe2==1)
 117   1         { LCD_CSB=Lcd_nEn; }
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 3   

 118   1      }
 119          
 120          
 121          
 122          
 123          void WritAddr(bit LR_Lcd,uchar idata  CommData)
 124                  {
 125   1                 if(LR_Lcd)
 126   1                   { wrLcdOper (1,0,Lcomm,CommData); }
 127   1                         else
 128   1                           { wrLcdOper (0,1,Lcomm,CommData); }
 129   1                      }
 130          
 131          //========================= x saddr =================== x eaddr =================== y  saddr =============
             - y eaddr ==================
 132          void DrawRectangle ( uchar idata RowAddr, uchar idata EndRowAddr,uchar idata StConlumnAddr,uchar idata End
             -ConlumnAddr,uchar *DataPtr, uchar idata Pdata,uchar idata OpType)
 133                  {
 134   1                uchar idata StartPageAddr;
 135   1                        uchar idata StartColumnAddr;
 136   1                        uchar idata WColumnTemp;
 137   1                uchar idata ColumnTemp;
 138   1                        uchar idata MovN;
 139   1                        uchar idata LcdDataTemp;
 140   1                        uchar idata PageNum;
 141   1                        uchar code *Ptr;
 142   1                        uchar idata Dtemp;
 143   1                        uchar idata j;
 144   1                        bit   LR_Lcd;
 145   1                bit   LR_Bit;
 146   1      
 147   1                Ptr=DataPtr;
 148   1                StartPageAddr=RowAddr/8|SetPageAddr;
 149   1                        MovN=RowAddr%8; 
 150   1                        PageNum=EndRowAddr/8-RowAddr/8;
 151   1      
 152   1                        if(StConlumnAddr>=LcdRowNum)
 153   1                          {  StartColumnAddr=StConlumnAddr-LcdRowNum;
 154   2                                 LR_Lcd=R_Lcd;
 155   2                          }
 156   1                        else
 157   1                          {  StartColumnAddr=StConlumnAddr;
 158   2                                 LR_Lcd=L_Lcd;
 159   2                          }
 160   1                StartColumnAddr+=SetColumnAddr;
 161   1      
 162   1                if(StartPageAddr<=SetPageAddr+LcdPageNub)
 163   1                 { 
 164   2                    LR_Bit=LR_Lcd;
 165   2                            WritAddr(LR_Bit,StartPageAddr);
 166   2                                WColumnTemp=StartColumnAddr;
 167   2                    ColumnTemp=StartColumnAddr-SetColumnAddr;
 168   2      
 169   2                            for(j=StConlumnAddr;j<=EndConlumnAddr;j++)
 170   2                                 { 
 171   3                                                       
 172   3                                       if(LR_Bit==L_Lcd)
 173   3                         { if(ColumnTemp++==LcdRowNum)
 174   4                             {
 175   5                                                   LR_Bit=~LR_Bit;
 176   5                                                       WColumnTemp=SetColumnAddr;
 177   5                               WritAddr(LR_Bit,StartPageAddr);                                     
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 4   

 178   5                             }
 179   4                                         }
 180   3      
 181   3                                       //WritAddr(LR_Bit,WColumnTemp);
 182   3                                       //LcdDataTemp=RedLcdData(LR_Bit);         //读出显示RAM数据    +1      
 183   3                                       LcdDataTemp=0;                                          
 184   3                                       switch( OpType )                                    //判断显示类型                                           
 185   3                                     { 
 186   4                                            case RecDis: { LcdDataTemp |=*DataPtr++<<=MovN ; }break;                           
 187   4                                                         
 188   4                                            case ClrAnd: {  LcdDataTemp&=Pdata; }break;
 189   4                                                            
 190   4                                            case ClrAdd: {  LcdDataTemp|=Pdata; }break; 
 191   4                                          }                 
 192   3                              
 193   3                                   WritAddr(LR_Bit,WColumnTemp++);               //-1
 194   3                                   if(LR_Bit)
 195   3                        { wrLcdOper (1,0,Ldata,LcdDataTemp); }
 196   3                                   else
 197   3                                        { wrLcdOper (0,1,Ldata,LcdDataTemp); }
 198   3                             }
 199   2                              }
 200   1      
 201   1                        if(PageNum==0){ return; }
 202   1                        
 203   1                        while(PageNum--)
 204   1                               {   
 205   2                                  StartPageAddr++;                            
 206   2                              if(StartPageAddr>SetPageAddr+LcdPageNub){ return; }
 207   2                                        
 208   2                                  LR_Bit=LR_Lcd;
 209   2                              WritAddr(LR_Bit,StartPageAddr);
 210   2                                      WColumnTemp=StartColumnAddr;
 211   2                      ColumnTemp=StartColumnAddr-SetColumnAddr;
 212   2                        
 213   2                      for(j=StConlumnAddr;j<=EndConlumnAddr;j++)
 214   2                                   {                         
 215   3                                         if(LR_Bit==L_Lcd)
 216   3                          { if(ColumnTemp++==LcdRowNum)
 217   4                             {
 218   5                                                   LR_Bit=~LR_Bit;
 219   5                                                       WColumnTemp=SetColumnAddr;
 220   5                               WritAddr(LR_Bit,StartPageAddr);                                     
 221   5                             }
 222   4                                          }                                                                                                    
 223   3      
 224   3                         //WritAddr(LR_Bit,WColumnTemp);
 225   3                                         //LcdDataTemp=RedLcdData(LR_Bit);         //读出显示RAM数据  +1      
 226   3                                         LcdDataTemp=0;                                                
 227   3                                         switch( OpType )                                   //判断显示类型                                          
 228   3                                      { 
 229   4                                            case RecDis: { 
 230   5                                           Dtemp=*Ptr++>>(8-MovN);
 231   5                                                                               if((PageNum>1)||(MovN==0))                                  //在最后一页,第一数据指针不用再取数据.              
 232   5                                                              { LcdDataTemp|=*DataPtr++<<MovN;}
 233   5                                                                               LcdDataTemp|=Dtemp;                                                                                     
 234   5                                                         }break;
 235   4      
 236   4                                            case ClrAnd: {  LcdDataTemp&=Pdata; }break;
 237   4                                                            
 238   4                                            case ClrAdd: {  LcdDataTemp|=Pdata; }break; 
 239   4                                          }                 
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 5   

 240   3                              
 241   3                                     WritAddr(LR_Bit,WColumnTemp++);               //-1
 242   3                                     if(LR_Bit)
 243   3                           { wrLcdOper (1,0,Ldata,LcdDataTemp); }
 244   3                                     else
 245   3                                           { wrLcdOper (0,1,Ldata,LcdDataTemp); }
 246   3                                  }           
 247   2                              }
 248   1                        
 249   1              }
 250          
 251          
 252          
 253          //=====================================================================================================
 254          void LcdDisplayChar( uchar idata RowAddr, uchar idata ConlumnAddr,uchar *DataPtr,bit Chs_Char)
 255                  { uchar idata DipTemp[16];
 256   1                uchar idata StartPageAddr;
 257   1                        uchar idata StartColumnAddr;
 258   1                uchar idata ColumnTemp;
 259   1                        uchar idata MovN;
 260   1                        uchar idata DipNum;
 261   1                        uchar idata LcdDataTemp;
 262   1                        uchar idata j;
 263   1                bit   LastWrFig;
 264   1                        bit   LR_Lcd;
 265   1                bit   LR_Bit;
 266   1      
 267   1      //                bit AddDrwBit;
 268   1      
 269   1                        LcdDataTemp=0; 
 270   1                StartPageAddr=RowAddr/8|SetPageAddr;
 271   1                        MovN=RowAddr%8; 
 272   1                        if(ConlumnAddr>=LcdRowNum)
 273   1                          {  StartColumnAddr=ConlumnAddr-LcdRowNum;
 274   2                                 LR_Lcd=R_Lcd;
 275   2                          }
 276   1                        else
 277   1                          {  StartColumnAddr=ConlumnAddr;
 278   2                                 LR_Lcd=L_Lcd;
 279   2                          }
 280   1                StartColumnAddr+=SetColumnAddr;
 281   1                if(RowAddr%16!=0)
 282   1                  { LastWrFig=1; }
 283   1                else
 284   1                  { LastWrFig=0; } 
 285   1      
 286   1                if(Chs_Char==Chs)
 287   1                              { DipNum=16;}
 288   1                            else
 289   1                              { DipNum=8; } 
 290   1      
 291   1                if(StartPageAddr<=SetPageAddr+LcdPageNub)
 292   1                 { 
 293   2                    LR_Bit=LR_Lcd;
 294   2                            WritAddr(LR_Bit,StartPageAddr);
 295   2                            WritAddr(LR_Bit,StartColumnAddr);
 296   2                    ColumnTemp=StartColumnAddr-SetColumnAddr;
 297   2                   
 298   2                            for(j=0;j<DipNum;j++)
 299   2                                 { 
 300   3                                   DipTemp[j]=*DataPtr>>(8-MovN);
 301   3                                       if(LR_Bit==L_Lcd)
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 6   

 302   3                         { if(ColumnTemp++==LcdRowNum)
 303   4                             {
 304   5                                                   LR_Bit=~LR_Bit;
 305   5                               WritAddr(LR_Bit,StartPageAddr);
 306   5                                       WritAddr(LR_Bit,SetColumnAddr);                                             
 307   5                             }
 308   4                                         }
 309   3                      //               LcdDataTemp=BackLcdData(AddDrwBit);
 310   3                      /*               if(AddDrwBit)
 311   3                                         { WritAddr(LR_Bit,ColumnTemp-1); }*/
 312   3                                   if(LR_Bit)
 313   3                        { wrLcdOper (1,0,Ldata,*DataPtr++<<MovN|LcdDataTemp); }
 314   3                                   else
 315   3                                        { wrLcdOper (0,1,Ldata,*DataPtr++<<MovN|LcdDataTemp); }
 316   3                             }
 317   2                              }
 318   1      
 319   1                        StartPageAddr++;
 320   1                        if(StartPageAddr<=SetPageAddr+LcdPageNub)
 321   1                 { 
 322   2                            LR_Bit=LR_Lcd;
 323   2                            WritAddr(LR_Bit,StartPageAddr);
 324   2                            WritAddr(LR_Bit,StartColumnAddr);
 325   2                    ColumnTemp=StartColumnAddr-SetColumnAddr;
 326   2                        
 327   2                    for(j=0;j<DipNum;j++)
 328   2                                  { 
 329   3                                    DipTemp[j]|=*DataPtr++<<MovN;
 330   3                                        if(LR_Bit==L_Lcd)
 331   3                         { if(ColumnTemp++==LcdRowNum)
 332   4                             {
 333   5                                                   LR_Bit=~LR_Bit;
 334   5                               WritAddr(LR_Bit,StartPageAddr);
 335   5                                       WritAddr(LR_Bit,SetColumnAddr);
 336   5                             }
 337   4                                         }
 338   3                     //   LcdDataTemp=BackLcdData(AddDrwBit);
 339   3                                        if(LR_Bit)
 340   3                         { wrLcdOper (1,0,Ldata,DipTemp[j]|LcdDataTemp); }
 341   3                                        else
 342   3                                         { wrLcdOper (0,1,Ldata,DipTemp[j]|LcdDataTemp); }
 343   3                                  }                   
 344   2                              }
 345   1      
 346   1                         StartPageAddr++;
 347   1                         if(StartPageAddr<=SetPageAddr+LcdPageNub)
 348   1                 { 
 349   2                   if(LastWrFig)
 350   2                             {    
 351   3                                      LR_Bit=LR_Lcd;
 352   3                                      WritAddr(LR_Bit,StartPageAddr);
 353   3                                  WritAddr(LR_Bit,StartColumnAddr);
 354   3                                          DataPtr=DataPtr-DipNum;
 355   3                                              ColumnTemp=StartColumnAddr-SetColumnAddr;               
 356   3      
 357   3                                          for(j=0;j<DipNum;j++) 
 358   3                                        { 
 359   4                                                  if(LR_Bit==L_Lcd)
 360   4                                { if(ColumnTemp++==LcdRowNum)
 361   5                                    {
 362   6                                                                  LR_Bit=~LR_Bit;
 363   6                                      WritAddr(LR_Bit,StartPageAddr);
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 7   

 364   6                                              WritAddr(LR_Bit,SetColumnAddr);
 365   6                                    }
 366   5                                                }
 367   4                                              //      LcdDataTemp=BackLcdData(AddDrwBit);
 368   4                                              if(LR_Bit)
 369   4                                { wrLcdOper (1,0,Ldata,*DataPtr++>>(8-MovN)|LcdDataTemp); }
 370   4                                              else
 371   4                                                { wrLcdOper (0,1,Ldata,*DataPtr++>>(8-MovN)|LcdDataTemp); }
 372   4                                            }
 373   3                                  }
 374   2                              }
 375   1                       }
 376          
 377          uchar FindCharIndx(char *pchar)
 378                 { uchar index=0;
 379   1                   uchar temp0;
 380   1      
 381   1               while(*(&ascii+index)!='\0')
 382   1                 { 
 383   2                           temp0=*(&ascii+index);   
 384   2                   if(*pchar==*(&ascii+index))    
 385   2                     {
 386   3                        return index;
 387   3                     }
 388   2                   index++;
 389   2                }   
 390   1               return 255;                          //没有找到序号，代表没有这个字   
 391   1            }
 392          
 393          
 394          uchar FindIndexHz(uchar  *pchar)         //寻找一个汉字的标号。
 395           {
 396   1         uchar idata index=0;
 397   1         while(*(&hzku+index*2)!='\0')
 398   1          {      
 399   2           if(*(pchar)==*(hzku+index*2)&&*(pchar+1)==*(hzku+index*2+1))    
 400   2               {
 401   3                 return (index);
 402   3               }
 403   2            index++;
 404   2              if(index>=250) { break;}
 405   2          }   
 406   1           return (0xff);                          //没有找到序号，代表没有这个字    
 407   1        }
 408          
 409          
 410          
 411          void PrintfHz(uchar idata RowAddr, uchar idata ConlumnAddr,uchar  *pchar)
 412                 {  uchar PtrAddr;
 413   1                    while(*pchar!='\0')
 414   1                 { 
 415   2                       PtrAddr=FindIndexHz(pchar);
 416   2                           if(PtrAddr!=0xff)
 417   2                             { LcdDisplayChar(RowAddr, ConlumnAddr,&HzTabl+PtrAddr*32,Chs); } 
 418   2                               else
 419   2                                 { return; } 
 420   2                               pchar+=2;
 421   2                               ConlumnAddr+=16; 
 422   2                         }                  
 423   1             }
 424          
 425          
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 8   

 426          void PrintfChar(uchar idata RowAddr, uchar idata ConlumnAddr,uchar *pchar)
 427                 {  uchar PtrAddr;
 428   1                while(*pchar!='\0')
 429   1                 { 
 430   2                       PtrAddr=FindCharIndx(pchar);
 431   2                           if(PtrAddr!=255)
 432   2                             {  LcdDisplayChar(RowAddr, ConlumnAddr,AsciiTabl+PtrAddr*16,Chr); }
 433   2                   //else
 434   2                     //{  return; } 
 435   2                   pchar++;
 436   2                               ConlumnAddr+=8;
 437   2                         }          
 438   1             }
 439          
 440          void PrintfData(uchar idata RowAddr, uchar idata ConlumnAddr,uchar idata DDtat)
 441                 {
 442   1               switch(DDtat)
 443   1                          {  
 444   2                    case 0:{ PrintfChar(RowAddr, ConlumnAddr,"0"); }break;
 445   2                                case 1:{ PrintfChar(RowAddr, ConlumnAddr,"1"); }break;
 446   2                                case 2:{ PrintfChar(RowAddr, ConlumnAddr,"2"); }break;
 447   2                                case 3:{ PrintfChar(RowAddr, ConlumnAddr,"3"); }break;
 448   2                                case 4:{ PrintfChar(RowAddr, ConlumnAddr,"4"); }break;
 449   2                                case 5:{ PrintfChar(RowAddr, ConlumnAddr,"5"); }break;
 450   2                                case 6:{ PrintfChar(RowAddr, ConlumnAddr,"6"); }break;
 451   2                                case 7:{ PrintfChar(RowAddr, ConlumnAddr,"7"); }break;
 452   2                                case 8:{ PrintfChar(RowAddr, ConlumnAddr,"8"); }break;
 453   2                                case 9:{ PrintfChar(RowAddr, ConlumnAddr,"9"); }break;
 454   2                                case 10:{ PrintfChar(RowAddr, ConlumnAddr,"A"); }break;
 455   2                                case 11:{ PrintfChar(RowAddr, ConlumnAddr,"B"); }break;
 456   2                                case 12:{ PrintfChar(RowAddr, ConlumnAddr,"C"); }break;
 457   2                                case 13:{ PrintfChar(RowAddr, ConlumnAddr,"D"); }break;
 458   2                                case 14:{ PrintfChar(RowAddr, ConlumnAddr,"E"); }break;
 459   2                                case 15:{ PrintfChar(RowAddr, ConlumnAddr,"F"); }break;
 460   2                                default:{ PrintfChar(RowAddr, ConlumnAddr,"Z"); }break;
 461   2                              }
 462   1                 }
 463          
 464          
 465          void wrlattice (uchar idata data1,uchar idata data2)
 466          {
 467   1        uchar idata i,j;
 468   1        wrLcdOper (1,1,Lcomm,SetDiSartL); 
 469   1        for(j=0;j<8;j++)
 470   1        {
 471   2          wrLcdOper (1,1,Lcomm,SetPageAddr+j);
 472   2              wrLcdOper (1,1,Lcomm,SetColumnAddr);     
 473   2          for(i=0;i<LcdRowNum;i=i+2)
 474   2          {
 475   3            wrLcdOper (1,1,Ldata,data1);
 476   3            wrLcdOper (1,1,Ldata,data2);
 477   3          }
 478   2        }
 479   1      }
 480          
 481          
 482          void LCD_delay (unsigned int us)   //delay time
 483          {
 484   1         while(us--);
 485   1      }
 486          
 487          
C51 COMPILER V7.06   LCDDRIVE                                                              06/13/2011 20:38:05 PAGE 9   

 488          void lcd_xt_start(void)
 489          {
 490   1          uchar i;
 491   1          wrlattice (0,0);
 492   1              DrawRectangle (0,31,31,96, bimp,0, 0);
 493   1              PrintfHz(36 ,24 ,  "系统启动中");
 494   1              DrawRectangle (56,63,8,8,0,0xff, 2);
 495   1      
 496   1              DrawRectangle (56,63,9,118,0,0x81, 2);
 497   1      
 498   1              DrawRectangle (56,63,119,119,0,0xff,2);
 499   1              for(i=9;i<=117;i+=4)
 500   1              {  DrawRectangle (56,63,i,i+3,0,0xff, 2);
 501   2                 LCD_delay(10000);
 502   2              }
 503   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2083    ----
   CONSTANT SIZE    =   3183    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      40
   IDATA SIZE       =   ----      35
   BIT SIZE         =   ----       7
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
